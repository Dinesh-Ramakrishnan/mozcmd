[{
  name: "calllog",
  description: "Commands to manipulate function call logging"
}, {
  name: "calllog start",
  description: "Start logging function calls to the console",
  params: [
    {
      name: "source",
      type: "string",
      description: "Variable name in content window to get global object, or URI of JSM",
    }
  ],
  exec: function(args, context) {
    let chromeWin = context.environment.chromeDocument.defaultView;
    let contentWin = context.environment.contentDocument.defaultView;
    let globalObj;
    if (args.source.indexOf("resource:") == 0) {
      try {
        globalObj = Components.utils.import(args.source);
      }
      catch (e) {
        return "Invalid JSM!";
      }
    } else {
      if (args.source in contentWin) {
        globalObj = Components.utils.getGlobalForObject(contentWin[args.source]);
      } else {
        return "Object name not found in content window";
      }
    }


    if (typeof chromeWin.Debugger == "undefined") {
      let JSDebug = {};
      Components.utils.import("resource://gre/modules/jsdebugger.jsm", JSDebug);
      JSDebug.addDebuggerToGlobal(chromeWin);
    }

    let tm = Components.classes["@mozilla.org/thread-manager;1"]
                       .getService(Components.interfaces.nsIThreadManager);
    tm.mainThread.dispatch({
      run: function() {

        function dvToString(v) {
          if (typeof v !== "object" || v === null)
            return uneval(v);
          return "[object " + v.class + "]";
        }

        function framePosition(f) {
          if (!f.script)
            return f.type + " code";
          return (f.script.url || f.type + " code") + ":" + f.script.getOffsetLine(f.offset);
        }

        function callDescription(f) {
          return ((f.callee.name || "<anonymous>") + "(" + f.arguments.map(dvToString).join(", ") + ")");
        }

        function onEnterFrame(f) {
          try {
            let msg = Components.classes["@mozilla.org/scripterror;1"]
                                .createInstance(Components.interfaces.nsIScriptError);
            msg.init("Method call: " + callDescription(f),
                     f.script ? f.script.url : (f.type + " code"),
                     "",
                     f.script.getOffsetLine(f.offset),
                     0,
                     Components.interfaces.nsIScriptError.warningFlag,
                     "component javascript");
            Services.console.logMessage(msg);
          } catch(e) {}
        }

        let dbg = new chromeWin.Debugger(globalObj);
        if (!Array.isArray(chromeWin.__jsmDebuggers))
          chromeWin.__jsmDebuggers = [];
        chromeWin.__jsmDebuggers.push(dbg);
        dbg.onEnterFrame = onEnterFrame;
      }
    }, Components.interfaces.nsIThread.DISPATCH_NORMAL);
    return "Call logging started for " + args.source;
  }
}, {
  name: "calllog stop",
  description: "Stop all function call logging",
  exec: function(args, context) {
    let chromeWin = context.environment.chromeDocument.defaultView;
    if (!Array.isArray(chromeWin.__jsmDebuggers) || chromeWin.__jsmDebuggers.length == 0)
      return "No call logging is currently active";
    let numDebuggers = chromeWin.__jsmDebuggers.length;
    for (let dbg of chromeWin.__jsmDebuggers)
      dbg.onEnterFrame = undefined;
    chromeWin.__jsmDebuggers = [];
    return "Stopped call logging for " + numDebuggers + " contexts";
  }
}]