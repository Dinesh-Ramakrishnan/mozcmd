[{
  name: "calllog",
  description: "Commands to manipulate function call logging"
}, {
  name: "calllog record",
  description: "Start logging function calls to the console",
  exec: function(args, context) {
    let global = Components.utils.getGlobalForObject(this);

    if (typeof global.Debugger == "undefined") {
      let JSDebug = {};
      Components.utils.import("resource://gre/modules/jsdebugger.jsm", JSDebug);
      JSDebug.addDebuggerToGlobal(global);
    }
    let Debugger = global.Debugger;

    let contentWin = context.environment.contentDocument.defaultView;

    let dbg = new Debugger(contentWin);
    if (!Array.isArray(global.callLogDebuggers))
      global.callLogDebuggers = [];
    global.callLogDebuggers.push(dbg);
    dbg.onEnterFrame = this.onEnterFrame.bind(this);

    return "Call logging started.";
  },
  valueToString: function(value) {
    if (typeof value !== "object" || value === null)
      return uneval(value);
    return "[object " + value.class + "]";
  },
  framePosition: function(frame) {
    if (!frame.script)
      return frame.type + " code";
    let line = frame.script.getOffsetLine(frame.offset);
    let source = frame.script.url || (frame.type + " code");
    return source + ":" + line;
  },
  callDescription: function(frame) {
    let name = frame.callee.name || "<anonymous>";
    let args = frame.arguments.map(this.valueToString).join(", ");
    return name + "(" + args + ")";
  },
  onEnterFrame: function(frame) {
    try {
      let msg = Components.classes["@mozilla.org/scripterror;1"]
                          .createInstance(Components.interfaces.nsIScriptError);
      msg.init("Method call: " + this.callDescription(frame),
               frame.script ? frame.script.url : (frame.type + " code"),
               "",
               frame.script.getOffsetLine(frame.offset),
               0,
               Components.interfaces.nsIScriptError.warningFlag,
               "component javascript");
      Services.console.logMessage(msg);
    } catch(e) {}
  }
}, {
  name: "calllog stop",
  description: "Stop function call logging",
  exec: function(args, context) {
    let global = Components.utils.getGlobalForObject(this);

    let numDebuggers = 0
    if (Array.isArray(global.callLogDebuggers))
      numDebuggers = global.callLogDebuggers.length;
    if (numDebuggers == 0)
      return "No call logging is currently active";
    for (let dbg of global.callLogDebuggers)
      dbg.onEnterFrame = undefined;
    global.callLogDebuggers = [];

    return "Stopped call logging for " + numDebuggers + " contexts";
  }
}]